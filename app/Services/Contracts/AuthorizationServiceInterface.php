<?php

// Контракт `AuthorizationServiceInterface` декларирует методы,
// необходимые для реализации проверки полномочий пользователя в системе.
// Он абстрагирует логику авторизации,
// позволяя заменять реализацию авторизации без изменения кода, который зависит от этого интерфейса.

// Пример интерфейса `AuthorizationServiceInterface` может выглядеть так:



namespace App\Services\Contracts;

use App\Models\User;

interface AuthorizationServiceInterface
{
    /**
     * Проверка, имеет ли пользователь доступ к определенному действию или ресурсу.
     *
     * @param User $user Пользователь, для которого проверяется доступ.
     * @param string $action Действие или ресурс, доступ к которому проверяется.
     * @return bool Возвращает true, если пользователь авторизован для выполнения действия, иначе false.
     */
    public function check(User $user, string $action): bool;
}


// Этот интерфейс определяет один метод `check`,
// который принимает два аргумента: пользователя (`User`) и строку действия (`$action`).
// Метод должен вернуть булево значение, указывающее, разрешено ли пользователю выполнять данное действие в приложении.

// Любой класс, реализующий `AuthorizationServiceInterface`,
// должен предоставить конкретную реализацию метода `check`.
// Это может включать в себя проверку ролей пользователя,
// его разрешений или других полисей (политик доступа), настроенных в системе. 

// Реализуя сервис авторизации через интерфейс,
// можно легко адаптировать систему к изменениям бизнес требований
// без необходимости менять другие части приложения, которые подразумевают проверку авторизаций.