<?php
// Контракт `AuthenticationServiceInterface` будет описывать интерфейс,
// который должны реализовать все сервисы аутентификации,
// чтобы гарантировать соблюдение определенного контракта (набора правил и сигнатур методов)
// при реализации механизма аутентификации.

// Вот пример интерфейса `AuthenticationServiceInterface` в Laravel:


namespace App\Services\Contracts;

interface AuthenticationServiceInterface
{
    /**
     * Метод аутентификации пользователя по email и паролю.
     *
     * @param string $email Email пользователя.
     * @param string $password Пароль пользователя.
     * @return bool Возвращает true, если аутентификация прошла успешно, иначе false.
     */
    public function authenticate(string $email, string $password): bool;
}


// В данном примере интерфейс `AuthenticationServiceInterface` определяет один метод `authenticate`,
// который должен принимать email и пароль и возвращать булево значение в зависимости от успеха аутентификации.

// Классы, реализующие этот интерфейс, будут обязаны реализовать метод `authenticate`
// и могут быть использованы для аутентификации пользователей в разных частях системы,
// не зависимо от конкретной реализации процесса аутентификации.
// Это обеспечивает гибкость и возможность замены одной реализации сервиса
// на другую без необходимости изменения кода, который использует интерфейс.