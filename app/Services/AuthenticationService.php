<?php

// Файл `app/Services/AuthenticationService.php` является сервисом, который обрабатывает логику аутентификации пользователя. Этот сервис должен содержать методы, обеспечивающие проверку учетных данных пользователя и аутентификации пользователя в системе.

// В Laravel для аутентификации мы обычно используем
// встроенный фасад Auth. Однако, в этом примере мы покажем,
// как реализовать собственный сервис аутентификации,
// который будет использовать UserRepository для обращения
// к базе данных.



namespace App\Services;

use App\Repositories\Contracts\UserRepositoryInterface;
use Illuminate\Support\Facades\Hash;

class AuthenticationService
{
    private $userRepository;

    public function __construct(UserRepositoryInterface $userRepository)
    {
        $this->userRepository = $userRepository;
    }

    public function authenticate(string $email, string $password): bool
    {
        $user = $this->userRepository->findByEmail($email);

        if (!$user) {
            return false;
        }

        if (Hash::check($password, $user->password)) {
            return true;
        }

        return false;
    }
}

// 2 вопроса:


// В этом сервисе:

// - Мы внедряем зависимость `UserRepositoryInterface`.
// Это интерфейс, который представляет репозиторий пользователей.
// Реализация этого интерфейса будет обеспечивать доступ
// к пользователям в базе данных.

// ?? - здесь получается, единое наследование?
// ну тут понятно, что возвращается только тру или фолс,
// но если ответ подразумевает большую вариативность, надо декомпозить?


// - Метод `authenticate` принимает email и пароль пользователя. Он использует UserRepository для поиска пользователя по email в базе данных.
// - Если пользователь не найден, метод немедленно возвращает false.
// - Если пользователь найден, метод проверяет пароль пользователя с помощью `Hash::check`, функции хеширования Laravel.
// - Если хеш пароля совпадает с хешем сохраненным в базе данных, метод возвращает true, в обратном случае - false. 

// В любом реальном приложении этот сервис должен быть дополнен обработкой исключений и событиями или логированием для отслеживания авторизаций.
// Также он мог бы иметь функцию `logIn` для проведения процедуры авторизации, если успешно пройдена аутентификация.
// ?? вот по поводу исключений в реальном приложении - что имеется в виду?